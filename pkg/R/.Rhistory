temp[1000,]
data(mpg2)
data(mpg)
mpg
 p <- qplot(displ, hwy, data=mpg2) + geom smooth(method="lm")
 p <- qplot(displ, hwy, data=mpg2) + geom_smooth(method="lm")
 p <- qplot(displ, hwy, data=mpg) + geom_smooth(method="lm")
p + facet grid(cyl ~ drv)
p + facet_grid(cyl ~ drv)
mpg$cyl
mpg$drv
p + geom_ribbon(aes(x=x,ymin=low,ymax=high),fill=alpha("blue",0.3)) + facet_grid(A~.)
p + geom_ribbon(aes(x=x,ymin=low,ymax=high),fill=alpha("blue",0.3)) + facet_grid(.~A)
p + geom_ribbon(aes(x=x,ymin=low,ymax=high),fill=alpha("blue",0.3))
p <- ggplot(temp,aes(x,y))
p + geom_ribbon(aes(x=x,ymin=low,ymax=high),fill=alpha("blue",0.3)) + facet_grid(A~.)
p + geom_ribbon(aes(x=x,ymin=low,ymax=high),fill=alpha("blue",0.3)) + facet_grid(A*B~.)
p + geom_ribbon(aes(x=x,ymin=low,ymax=high),fill=alpha("blue",0.3)) + facet_grid(A~B)
p + geom_ribbon(aes(x=x,ymin=low,ymax=high),fill=alpha("blue",0.3)) + layer(geom="line")+ facet_grid(A~B)
help.search("splines")
?bs
b3x
b3x.my <- bs(x,knots=knots)
dim(b3x)
dim(b3x.my)
knots
?bs
b3x.my <- bs(x,knots=knots[2:6])
dim(b3x.my)
b3x.my[1,]
b3x.my[1:10,]
b3x.my <- bs(x,knots=knots[2:6],boundary.knot=c(0,1000))
b3x.my <- bs(x,knots=knots[2:6],boundary.knots=c(0,1000))
b3x.my <- bs(x,knots=knots[2:6],Boundary.knots=c(0,1000))
dim(b3x.my)
b3x.my <- bs(x,knots=knots[2:8],Boundary.knots=c(0,1000))
dim(b3x.my)
b3x.my <- bs(x,knots=knots[3:6],Boundary.knots=c(0,1000))
dim(b3x.my)
plot(bx3.my[1,])
plot(b3x.my[1,])
plot(b3x.my[,1])
plot(b3x.my[,1],type="l")
lines(b3x.my[,2])
lines(b3x.my[,3])
lines(b3x.my[,4])
lines(b3x.my[,5])
lines(b3x.my[,6])
lines(b3x.my[,7])
lines(b3x.my[,8])
plot(b3x[1,],type="l")
plot(b3x[2,],type="l")
plot(b3x[3,],type="l")
plot(b3x[4,],type="l")
plot(b3x[5,],type="l")
b3x.my <- bs(x,knots=knots)
plot(b3x.my[,1],type="l")
plot(b3x.my[,2],type="l")
plot(b3x.my[,3],type="l")
plot(b3x.my[,12],type="l")
plot(b3x.my[,10],type="l")
plot(b3x.my[,10],type="l",Boundary.knots=c(-400,1000))
b3x.my <- bs(x,knots=knots,Boundary.knots=c(-400,1000))
plot(b3x.my[,10],type="l")
plot(b3x.my[,7],type="l")
lines(b3x[,4]+0.05,col="red")
plot(b3x.my[,7],type="l")
lines(b3x[4,]+0.05,col="red")
plot(b3x.my[,7],type="l")
lines(b3x[4,],col="red")
plot(b3x.my[,4],type="l")
lines(b3x[1,],col="red")
q(9
q()
n
7767 - 14*250 - 300
3967+250
- 14*250 - 300
load("/Users/nielsrichardhansen/Downloads/MA.RData")
help.start()
require(mboost)
library(party)
x <- 5
class(x)
typeof(x)
is.vector(x)
x
x[1]
coef
coefficients
getMethods(coefficients)
getMethod(coefficients)
getMethods("coefficients")
stats::coefficients
method(coefficients)
methods(coef)
?coef.aov
?stats:::coef.aov
coef.aov
stats:::coef.aov
stats:::coef.defualt
stats:::coef.default
?stats:::coef.default
sparse.model.matrix
?sparse
library(Matrix)
?sparse.model.matrix
install.package("ggplot2")
install.packages("ggplot2")
?options
getOption
getOption()
options()
options(repos=c(CRAN="http://r.research.att.com/"))
install.packages("ggplot2")
options(repos=c(CRAN="http://cran.dk.r-project.org/"))
library(Matrix)
?sparse.model.matrix
install.packages("caret")
?caret
help.start()
Making packages.html . done
install.packages("glmnet")
?glmnet
library(glmnet)
?glmnet
?charmatch
charmatch("o",c("h","e","l","l","o"))
strsplit("hello","")
as.character(strsplit("hello",""))
strsplit("hello","")[[1]]
charmatch("o", strsplit("hello","")[[1]])
greb
grep("o","hello")
regexpr("o","hello")
regexpr("o","hollo")
?regexpr
gregexpr("o","hollo")
setwd("~/programs/ppstat/R/")
source("PointProcessModel.R")
source("ppstat.R")
source("Family.R")
source("ContinuousProcess.R")
source("MarkedPointProcess.R")
source("ContinuousProcess.R")
library(Matrix)
source("ContinuousProcess.R")
source("ProcessData.R")
source("PointProcessModel.R")
setClass("PointProcessModel",         representation(                        processData = "ProcessData",                        modelMatrix = "Matrix",                        delta = "numeric",                        formula = "formula",                        family = "Family",                        coefficients = "numeric",                        fixedCoefficients="list",                        Omega = "matrix",                        penalization = "logical",                        var = "matrix",                        call="call",                        optimResult="list"                        )         )
